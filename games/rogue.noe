-- which version of NotEye is this noe-file compatible with
gamenoteyever = 0x750

dofile(commondir.."generic-tile.noe")

mapregion = {x0=0, y0=1, x1=80, y1=23}
minipos = {x=1, y=0}

dirkeys = keytabs.vidot

function ispc(C)
  return gch(C) == "@" or av(gch(C)) == 1
  end

function findpc()
  mapon = false
  
  -- maybe player is under the cursor (BSD rogue)
  if pcat(pcursor) then 
    ncursor = pcursor
    mapon = true

  -- if not (Epyx rogue)
  else 
    for x=mapregion.x0,mapregion.x1-1 do
    for y=mapregion.y0,mapregion.y1-1 do
      if av(gch(scrget(S, x,y))) == 1 then
        ncursor = V(x,y)
        mapon = true
        end
      end end
    end
  end

function xtileaux2(ch, co, av, ba)

  if ch == "@" or av == 1 then
    return tspat(rlat, ssMon, 22, 9)
  elseif ch == "+" or av == 206 then
    return tspatm(wallcol(0x803000), vaporatc(0xA05000), spFlat + spWall + spIWall, 12, 0)
  elseif ch == "#" or (av >= 176 and av <= 178) then return floorcol(0x808080)
  elseif ch == "." or av > 250 then return floorcol(0x00C000)
  elseif ch == "A" then return tspat(rlat, ssMon, 32, 8)
  elseif ch == "B" then return tspat(rlat, ssMon, 34, 10)
  elseif ch == "C" then return tspat(rlat, ssMon, 0, 10)
  elseif ch == "D" then return tspat(rlat, ssMon, 14, 12)
  elseif ch == "E" then return tspat(rlat, ssMon, 1, 9)
  elseif ch == "F" then return tspat(rlat, ssMon, 7, 13)
  elseif ch == "G" then return tspat(rlat, ssMon, 27, 12)
  elseif ch == "H" then return tspat(rlat, ssMon, 15, 9)
  elseif ch == "I" then return tspat(rlat, ssMon, 27, 8)
  elseif ch == "J" then return tspat(rlat, ssMon, 10, 12)
  elseif ch == "K" then return tspat(rlat, ssMon, 6, 32)
  elseif ch == "L" then return tspat(rlat, ssMon, 26, 9)
  elseif ch == "M" then return tspat(rlat, ssMon, 45, 28)
  elseif ch == "N" then return tspat(rlat, ssMon, 14, 9)
  elseif ch == "O" then return tspat(rlat, ssMon, 7, 11)
  elseif ch == "P" then return tspat(rlat, ssMon, 27, 13)
  elseif ch == "Q" then return tspat(rlat, ssMon, 3, 32)
  elseif ch == "R" then return tspat(rlat, ssMon, 16, 13)
  elseif ch == "S" then return tspat(rlat, ssMon, 13, 13)
  elseif ch == "T" then return tspat(rlat, ssMon, 18, 13)
  elseif ch == "U" then return tspat(rlat, ssMon, 47, 33)
  elseif ch == "V" then return tspat(rlat, ssMon, 24, 13)
  elseif ch == "W" then return tspat(rlat, ssMon, 26, 13)
  elseif ch == "X" then return tspat(rlat, ssMon, 34, 13)
  elseif ch == "Y" then return tspat(rlat, ssMon, 40, 13)
  elseif ch == "Z" then return tspat(rlat, ssMon, 48, 11)
  elseif ch == "!" or av == 173 then return tspat(rlat, ssItem, 30, 19)
  elseif ch == "?" or av == 13  then return tspat(rlat, ssItem, 1, 21)
  elseif ch == "%" or av == 240 then return tspat(rlat, ssFloorv, 16, 7)
  elseif ch == ")" or av == 24  then return tspat(rlat, ssItem, 15, 23)
  elseif ch == "]" or av == 8   then return tspat(rlat, ssItem, 38, 2)
  elseif ch == ":" or av == 5   then return tspat(rlat, ssItem, 18, 17)
  elseif ch == "," or av == 12  then return tspat(rlat, ssItem, 5, 1)
  elseif ch == "=" or av == 9   then return tspat(rlat, ssItem, 21, 20)
  elseif ch == "*" or av == 15  then return tspat(rlat, ssItem, 13, 18)
  elseif ch == "/" or av == 231 then return tspat(rlat, ssItem, 39, 21)
  elseif ch == "^" or av == 4   then return tspat(rlat, ssItem, 42, 7)
  elseif ch == "|" or ch == "-" or (av >= 160 and av <= 240) then return wallcol(0x803000)
    end
  end

local lxminimap = xminimap

function xminimap(C)
  if minimode == modeASCII then return lxminimap(C) end
  b = 0
  local ch = gch(C)
  local av = av(ch)
  
  if ch == " " then b = 0
  elseif ispc(C) then b = 0xFFFFFF
  elseif (ch == "." or av > 250) then b = 0x603030
  elseif (ch == "#" or (av >= 176 and av <= 178)) then b = 0x904040
  elseif ch == "-" or ch == "|" or (av >= 160 and av <= 224) then b = 0xC06060
  elseif (ch >= "A" and ch <= "Z") then b = 0x2F08000
  elseif ch == "%" or av == 240 then b = 0xFF00FF
  else b = 0x00FF00
  end
  
  return tilefill(b)
  end
  
setmainwindowtitle("Rogue")
defaultmodep(modeTiles, 3)
rungame(caller3("Rogue", "rogue"))
